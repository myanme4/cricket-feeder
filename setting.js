console.log("üöÄ setting.js is running...");

// ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Firebase ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà (v9+)
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.5.0/firebase-app.js";
import { getDatabase, ref, set, onValue } from "https://www.gstatic.com/firebasejs/10.5.0/firebase-database.js";

// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
const firebaseConfig = {
    apiKey: "AIzaSyDwOyp...",
    authDomain: "dht22-14f97.firebaseapp.com",
    databaseURL: "https://dht22-14f97-default-rtdb.firebaseio.com",
    projectId: "dht22-14f97",
    storageBucket: "dht22-14f97.appspot.com",
    messagingSenderId: "131749789651",
    appId: "1:131749789651:web:20c7b9cbd9fca47ee2b926",
    measurementId: "G-RKV9EL32X4"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const controlRef = ref(db, "controls");

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏õ Firebase
function updateMode(id, mode) {
    set(ref(db, `/controls/mode/${id}`), mode)
        .then(() => console.log(`‚úÖ Updated mode /controls/mode/${id} to ${mode}`))
        .catch(error => console.error(`‚ùå Error updating mode /controls/mode/${id}:`, error));
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ Firebase
function updateControl(id, state) {
    set(ref(db, `/controls/${id}`), state)
        .then(() => console.log(`‚úÖ Updated /controls/${id} to ${state}`))
        .catch(error => console.error(`‚ùå Error updating /controls/${id}:`, error));
}

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å Firebase
function loadSettings() {
    onValue(controlRef, snapshot => { // <-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        if (!snapshot.exists()) return;
        const data = snapshot.val();

        // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firebase (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ "auto")
        const lightMode = data.mode?.light || "auto";  
        const fanMode = data.mode?.fan || "auto";

        // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏à‡∏≤‡∏Å Firebase
        const toggleLight = document.getElementById("toggle-light");
        const toggleFan = document.getElementById("toggle-fan");

        if (toggleLight) {
            toggleLight.checked = !!data.light;
            toggleLight.dataset.mode = lightMode;
        }
        if (toggleFan) {
            toggleFan.checked = !!data.fan;
            toggleFan.dataset.mode = fanMode;
        }

        console.log(`üîÑ Loaded settings: Light=${data.light}, Mode=${lightMode}`);
        console.log(`üîÑ Loaded settings: Fan=${data.fan}, Mode=${fanMode}`);
    }, error => {
        console.error("‚ùå Firebase Load Error:", error);
    });
}

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Firebase ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener("DOMContentLoaded", function() {
    console.log("üåê Setting page loaded...");
    loadSettings();

    // ‚úÖ ‡∏î‡∏∂‡∏á Element ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    const toggleLight = document.getElementById("toggle-light");
    const toggleFan = document.getElementById("toggle-fan");
    const feedFood = document.getElementById("feed-food");
    const feedWater = document.getElementById("feed-water");

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ .addEventListener()
    if (toggleLight) {
        toggleLight.addEventListener("change", function() {
            updateMode("light", "manual");
            updateControl("light", this.checked);
        });
    }

    if (toggleFan) {
        toggleFan.addEventListener("change", function() {
            updateMode("fan", "manual");
            updateControl("fan", this.checked);
        });
    }

    if (feedFood) {
        feedFood.addEventListener("click", async () => {
            await updateMode("feed_motor", "manual");
            await updateControl("feed_motor", true);
            alert("‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£...");
        
            await new Promise(resolve => setTimeout(resolve, 5000));
            await updateControl("feed_motor", false);
        
            await updateMode("spread_motor", "manual");
            await updateControl("spread_motor", true);
            alert("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£...");
        
            await new Promise(resolve => setTimeout(resolve, 5000));
            await updateControl("spread_motor", false);
        
            alert("‚úÖ ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
        });        
    }

    if (feedWater) {
        feedWater.addEventListener("click", () => {
            updateMode("water_valve", "manual");
            updateControl("water_valve", true);
            setTimeout(() => updateControl("water_valve", false), 5000);
            alert("‚úÖ ‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß!");
        });
    }
});
